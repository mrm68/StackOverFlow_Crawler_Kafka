digraph G {
concentrate=true;
splines="ortho";
rankdir="LR";
subgraph legend{
    rank = min;
    label = "legend";
    Legend [shape=none, margin=0, label = <
        <table cellspacing="0" cellpadding="0" border="1"><tr><td>Code2flow Legend</td></tr><tr><td>
        <table cellspacing="0">
        <tr><td>Regular function</td><td width="50px" bgcolor='#cccccc'></td></tr>
        <tr><td>Trunk function (nothing calls this)</td><td bgcolor='#966F33'></td></tr>
        <tr><td>Leaf function (this calls nothing else)</td><td bgcolor='#6db33f'></td></tr>
        <tr><td>Function call</td><td><font color='black'>&#8594;</font></td></tr>
        </table></td></tr></table>
        >];
}node_24d71ae9 [label="10: __init__()" name="db_adapter::PostgresAdapter.__init__" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_40b69cb5 [label="21: _create_table()" name="db_adapter::PostgresAdapter._create_table" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_ecca49a4 [label="57: close()" name="db_adapter::PostgresAdapter.close" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_460d8236 [label="15: init()" name="db_adapter::PostgresAdapter.init" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_c8726fa7 [label="38: insert_questions()" name="db_adapter::PostgresAdapter.insert_questions" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_71ab0dec [label="15: __init__()" name="fetcher::FetcherStrategy.__init__" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_1cad7241 [label="26: fetch()" name="fetcher::FetcherStrategy.fetch" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_a91f3927 [label="0: (global)()" name="main::(global)" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_13747dd4 [label="53: _build_url()" name="main::_build_url" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_4d387ce1 [label="49: _get_storage_path()" name="main::_get_storage_path" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_f71670e5 [label="16: initiate_kafka()" name="main::initiate_kafka" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_112f3a31 [label="23: main()" name="main::main" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_3602cf47 [label="26: __init__()" name="notification_handler::Notifier.__init__" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_39a16b79 [label="48: notify()" name="notification_handler::Notifier.notify" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_6f3f4927 [label="13: __init__()" name="parser::QuestionParserTemplateMethod.__init__" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_a8895996 [label="61: _extract_excerpt()" name="parser::QuestionParserTemplateMethod._extract_excerpt" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_ecc3366e [label="58: _extract_link()" name="parser::QuestionParserTemplateMethod._extract_link" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_035c367b [label="52: _extract_questionID()" name="parser::QuestionParserTemplateMethod._extract_questionID" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_32620847 [label="68: _extract_questionTags()" name="parser::QuestionParserTemplateMethod._extract_questionTags" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_a7f89ffa [label="64: _extract_timestamp()" name="parser::QuestionParserTemplateMethod._extract_timestamp" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_4fef1ef4 [label="55: _extract_title()" name="parser::QuestionParserTemplateMethod._extract_title" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_d02871b8 [label="71: _extract_viewsCount()" name="parser::QuestionParserTemplateMethod._extract_viewsCount" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_c8b11dd6 [label="79: _extract_votesCount()" name="parser::QuestionParserTemplateMethod._extract_votesCount" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_baab41ea [label="75: _extracts_answersCount()" name="parser::QuestionParserTemplateMethod._extracts_answersCount" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_248093cf [label="20: parse()" name="parser::QuestionParserTemplateMethod.parse" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_d08984e0 [label="15: __init__()" name="scraper::StackOverflowScraperFacade.__init__" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_dfa7518d [label="23: _generate_notifier()" name="scraper::StackOverflowScraperFacade._generate_notifier" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_21305029 [label="55: _read_max_questions_limit()" name="scraper::StackOverflowScraperFacade._read_max_questions_limit" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_dc9eab3d [label="27: scrape()" name="scraper::StackOverflowScraperFacade.scrape" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_7820085e [label="15: __init__()" name="stream::QuestionStreamIterator.__init__" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_a43263e6 [label="44: _get_page_content_generator()" name="stream::QuestionStreamIterator._get_page_content_generator" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_5673eb80 [label="34: _parse_questions()" name="stream::QuestionStreamIterator._parse_questions" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_0e6d1ba0 [label="22: stream()" name="stream::QuestionStreamIterator.stream" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_2a7f392c [label="14: __init__()" name="watcher::QuestionWatcher.__init__" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_870fba28 [label="35: _get_max_question_id()" name="watcher::QuestionWatcher._get_max_question_id" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_8a205c7e [label="39: _get_new_questions()" name="watcher::QuestionWatcher._get_new_questions" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_ae8d6d57 [label="20: _load_state()" name="watcher::QuestionWatcher._load_state" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_e8ef4c67 [label="84: _sorted_questions()" name="watcher::QuestionWatcher._sorted_questions" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_884eb774 [label="61: _start_watching()" name="watcher::QuestionWatcher._start_watching" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_841ceb17 [label="43: persist_state()" name="watcher::QuestionWatcher.persist_state" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_11113ec0 [label="50: run()" name="watcher::QuestionWatcher.run" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_2a0c64fa [label="28: watch()" name="watcher::QuestionWatcher.watch" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_ecca49a4 -> node_ecca49a4 [color="#F0E442" penwidth="2"];
node_460d8236 -> node_40b69cb5 [color="#D55E00" penwidth="2"];
node_1cad7241 -> node_39a16b79 [color="#E69F00" penwidth="2"];
node_1cad7241 -> node_39a16b79 [color="#E69F00" penwidth="2"];
node_a91f3927 -> node_112f3a31 [color="#CC79A7" penwidth="2"];
node_112f3a31 -> node_24d71ae9 [color="#E69F00" penwidth="2"];
node_112f3a31 -> node_460d8236 [color="#E69F00" penwidth="2"];
node_112f3a31 -> node_71ab0dec [color="#E69F00" penwidth="2"];
node_112f3a31 -> node_13747dd4 [color="#E69F00" penwidth="2"];
node_112f3a31 -> node_4d387ce1 [color="#E69F00" penwidth="2"];
node_112f3a31 -> node_f71670e5 [color="#E69F00" penwidth="2"];
node_112f3a31 -> node_3602cf47 [color="#E69F00" penwidth="2"];
node_112f3a31 -> node_6f3f4927 [color="#E69F00" penwidth="2"];
node_112f3a31 -> node_d08984e0 [color="#E69F00" penwidth="2"];
node_112f3a31 -> node_2a7f392c [color="#E69F00" penwidth="2"];
node_112f3a31 -> node_11113ec0 [color="#E69F00" penwidth="2"];
node_6f3f4927 -> node_3602cf47 [color="#CC79A7" penwidth="2"];
node_248093cf -> node_39a16b79 [color="#CC79A7" penwidth="2"];
node_248093cf -> node_a8895996 [color="#CC79A7" penwidth="2"];
node_248093cf -> node_ecc3366e [color="#CC79A7" penwidth="2"];
node_248093cf -> node_035c367b [color="#CC79A7" penwidth="2"];
node_248093cf -> node_32620847 [color="#CC79A7" penwidth="2"];
node_248093cf -> node_a7f89ffa [color="#CC79A7" penwidth="2"];
node_248093cf -> node_4fef1ef4 [color="#CC79A7" penwidth="2"];
node_248093cf -> node_d02871b8 [color="#CC79A7" penwidth="2"];
node_248093cf -> node_c8b11dd6 [color="#CC79A7" penwidth="2"];
node_248093cf -> node_baab41ea [color="#CC79A7" penwidth="2"];
node_d08984e0 -> node_dfa7518d [color="#000000" penwidth="2"];
node_dfa7518d -> node_3602cf47 [color="#0072B2" penwidth="2"];
node_dfa7518d -> node_3602cf47 [color="#0072B2" penwidth="2"];
node_dc9eab3d -> node_39a16b79 [color="#0072B2" penwidth="2"];
node_dc9eab3d -> node_39a16b79 [color="#0072B2" penwidth="2"];
node_dc9eab3d -> node_21305029 [color="#0072B2" penwidth="2"];
node_7820085e -> node_3602cf47 [color="#D55E00" penwidth="2"];
node_0e6d1ba0 -> node_39a16b79 [color="#000000" penwidth="2"];
node_0e6d1ba0 -> node_a43263e6 [color="#000000" penwidth="2"];
node_0e6d1ba0 -> node_5673eb80 [color="#000000" penwidth="2"];
node_2a7f392c -> node_3602cf47 [color="#F0E442" penwidth="2"];
node_2a7f392c -> node_ae8d6d57 [color="#F0E442" penwidth="2"];
node_ae8d6d57 -> node_39a16b79 [color="#CC79A7" penwidth="2"];
node_884eb774 -> node_c8726fa7 [color="#F0E442" penwidth="2"];
node_884eb774 -> node_39a16b79 [color="#F0E442" penwidth="2"];
node_884eb774 -> node_39a16b79 [color="#F0E442" penwidth="2"];
node_884eb774 -> node_e8ef4c67 [color="#F0E442" penwidth="2"];
node_884eb774 -> node_841ceb17 [color="#F0E442" penwidth="2"];
node_884eb774 -> node_2a0c64fa [color="#F0E442" penwidth="2"];
node_841ceb17 -> node_39a16b79 [color="#CC79A7" penwidth="2"];
node_11113ec0 -> node_39a16b79 [color="#000000" penwidth="2"];
node_11113ec0 -> node_39a16b79 [color="#000000" penwidth="2"];
node_11113ec0 -> node_39a16b79 [color="#000000" penwidth="2"];
node_11113ec0 -> node_884eb774 [color="#000000" penwidth="2"];
node_11113ec0 -> node_841ceb17 [color="#000000" penwidth="2"];
node_2a0c64fa -> node_870fba28 [color="#56B4E9" penwidth="2"];
node_2a0c64fa -> node_8a205c7e [color="#56B4E9" penwidth="2"];
subgraph cluster_2201d346 {
    label="File: db_adapter";
    name="db_adapter";
    style="filled";
    graph[style=dotted];
    subgraph cluster_973f8513 {
        node_24d71ae9 node_460d8236 node_40b69cb5 node_c8726fa7 node_ecca49a4;
        label="Class: PostgresAdapter";
        name="PostgresAdapter";
        style="filled";
        graph[style=dotted];
    };
};
subgraph cluster_9df62d90 {
    label="File: fetcher";
    name="fetcher";
    style="filled";
    graph[style=dotted];
    subgraph cluster_d1bae804 {
        node_71ab0dec node_1cad7241;
        label="Class: FetcherStrategy";
        name="FetcherStrategy";
        style="filled";
        graph[style=dotted];
    };
};
subgraph cluster_1820ac83 {
    node_f71670e5 node_112f3a31 node_4d387ce1 node_13747dd4 node_a91f3927;
    label="File: main";
    name="main";
    style="filled";
    graph[style=dotted];
};
subgraph cluster_48b118a0 {
    label="File: notification_handler";
    name="notification_handler";
    style="filled";
    graph[style=dotted];
    subgraph cluster_e78f2007 {
        node_3602cf47 node_39a16b79;
        label="Class: Notifier";
        name="Notifier";
        style="filled";
        graph[style=dotted];
    };
};
subgraph cluster_2b137976 {
    label="File: parser";
    name="parser";
    style="filled";
    graph[style=dotted];
    subgraph cluster_ac7179b7 {
        node_6f3f4927 node_248093cf node_035c367b node_4fef1ef4 node_ecc3366e node_a8895996 node_a7f89ffa node_32620847 node_d02871b8 node_baab41ea node_c8b11dd6;
        label="Class: QuestionParserTemplateMethod";
        name="QuestionParserTemplateMethod";
        style="filled";
        graph[style=dotted];
    };
};
subgraph cluster_d282c4a9 {
    label="File: scraper";
    name="scraper";
    style="filled";
    graph[style=dotted];
    subgraph cluster_604ef1be {
        node_d08984e0 node_dfa7518d node_dc9eab3d node_21305029;
        label="Class: StackOverflowScraperFacade";
        name="StackOverflowScraperFacade";
        style="filled";
        graph[style=dotted];
    };
};
subgraph cluster_d391d62c {
    label="File: stream";
    name="stream";
    style="filled";
    graph[style=dotted];
    subgraph cluster_d62d33a5 {
        node_7820085e node_0e6d1ba0 node_5673eb80 node_a43263e6;
        label="Class: QuestionStreamIterator";
        name="QuestionStreamIterator";
        style="filled";
        graph[style=dotted];
    };
};
subgraph cluster_11dfa1fb {
    label="File: watcher";
    name="watcher";
    style="filled";
    graph[style=dotted];
    subgraph cluster_b9251182 {
        node_2a7f392c node_ae8d6d57 node_2a0c64fa node_870fba28 node_8a205c7e node_841ceb17 node_11113ec0 node_884eb774 node_e8ef4c67;
        label="Class: QuestionWatcher";
        name="QuestionWatcher";
        style="filled";
        graph[style=dotted];
    };
};
}
