digraph G {
concentrate=true;
splines="ortho";
rankdir="LR";
subgraph legend{
    rank = min;
    label = "legend";
    Legend [shape=none, margin=0, label = <
        <table cellspacing="0" cellpadding="0" border="1"><tr><td>Code2flow Legend</td></tr><tr><td>
        <table cellspacing="0">
        <tr><td>Regular function</td><td width="50px" bgcolor='#cccccc'></td></tr>
        <tr><td>Trunk function (nothing calls this)</td><td bgcolor='#966F33'></td></tr>
        <tr><td>Leaf function (this calls nothing else)</td><td bgcolor='#6db33f'></td></tr>
        <tr><td>Function call</td><td><font color='black'>&#8594;</font></td></tr>
        </table></td></tr></table>
        >];
}node_005e69c3 [label="21: _clean_excerpt()" name="display::QuestionDisplay._clean_excerpt" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_92a9dc7b [label="27: display()" name="display::QuestionDisplay.display" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_2c4fd31e [label="21: __init__()" name="fetcher::Fetcher_Strategy.__init__" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_1d84418f [label="0: (global)()" name="main::(global)" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_b5774e1e [label="6: main()" name="main::main" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_b99825b0 [label="21: __init__()" name="parser::QuestionParser_Template_Method.__init__" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_4a75031f [label="70: _build_link()" name="parser::QuestionParser_Template_Method._build_link" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_14c890b2 [label="56: _extract_answers()" name="parser::QuestionParser_Template_Method._extract_answers" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_b060fe1b [label="80: _extract_excerpt()" name="parser::QuestionParser_Template_Method._extract_excerpt" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_3687a328 [label="73: _extract_id()" name="parser::QuestionParser_Template_Method._extract_id" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_081bf222 [label="83: _extract_tags()" name="parser::QuestionParser_Template_Method._extract_tags" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_f30dfb97 [label="86: _extract_timestamp()" name="parser::QuestionParser_Template_Method._extract_timestamp" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_2fe5999a [label="77: _extract_title()" name="parser::QuestionParser_Template_Method._extract_title" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_5fc8b517 [label="62: _extract_views()" name="parser::QuestionParser_Template_Method._extract_views" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_1c203c02 [label="50: _extract_votes()" name="parser::QuestionParser_Template_Method._extract_votes" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_d3cf4d29 [label="29: _parse_question()" name="parser::QuestionParser_Template_Method._parse_question" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_9fd4e13f [label="24: parse()" name="parser::QuestionParser_Template_Method.parse" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_eddec4f2 [label="28: __init__()" name="scraper::StackOverflowScraper_Facade.__init__" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_61366fcb [label="22: __init__()" name="watcher::QuestionWatcher_Observer.__init__" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_71423e58 [label="82: _get_storage_path()" name="watcher::QuestionWatcher_Observer._get_storage_path" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_a8b95a59 [label="62: _load_last_seen_id()" name="watcher::QuestionWatcher_Observer._load_last_seen_id" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_b8b69899 [label="78: _save_last_seen_id()" name="watcher::QuestionWatcher_Observer._save_last_seen_id" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_52b4935f [label="42: check_new_questions()" name="watcher::QuestionWatcher_Observer.check_new_questions" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_d04e7c57 [label="28: start_watching()" name="watcher::QuestionWatcher_Observer.start_watching" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_92a9dc7b -> node_005e69c3 [color="#009E73" penwidth="2"];
node_1d84418f -> node_b5774e1e [color="#CC79A7" penwidth="2"];
node_d3cf4d29 -> node_4a75031f [color="#E69F00" penwidth="2"];
node_d3cf4d29 -> node_14c890b2 [color="#E69F00" penwidth="2"];
node_d3cf4d29 -> node_b060fe1b [color="#E69F00" penwidth="2"];
node_d3cf4d29 -> node_3687a328 [color="#E69F00" penwidth="2"];
node_d3cf4d29 -> node_081bf222 [color="#E69F00" penwidth="2"];
node_d3cf4d29 -> node_f30dfb97 [color="#E69F00" penwidth="2"];
node_d3cf4d29 -> node_2fe5999a [color="#E69F00" penwidth="2"];
node_d3cf4d29 -> node_5fc8b517 [color="#E69F00" penwidth="2"];
node_d3cf4d29 -> node_1c203c02 [color="#E69F00" penwidth="2"];
node_9fd4e13f -> node_d3cf4d29 [color="#CC79A7" penwidth="2"];
node_eddec4f2 -> node_2c4fd31e [color="#56B4E9" penwidth="2"];
node_eddec4f2 -> node_b99825b0 [color="#56B4E9" penwidth="2"];
node_61366fcb -> node_eddec4f2 [color="#009E73" penwidth="2"];
node_61366fcb -> node_a8b95a59 [color="#009E73" penwidth="2"];
node_a8b95a59 -> node_71423e58 [color="#E69F00" penwidth="2"];
node_b8b69899 -> node_71423e58 [color="#E69F00" penwidth="2"];
node_52b4935f -> node_92a9dc7b [color="#CC79A7" penwidth="2"];
node_52b4935f -> node_b8b69899 [color="#CC79A7" penwidth="2"];
node_d04e7c57 -> node_52b4935f [color="#CC79A7" penwidth="2"];
subgraph cluster_afec48a3 {
    label="File: display";
    name="display";
    style="filled";
    graph[style=dotted];
    subgraph cluster_aedd19cc {
        node_005e69c3 node_92a9dc7b;
        label="Class: QuestionDisplay";
        name="QuestionDisplay";
        style="filled";
        graph[style=dotted];
    };
};
subgraph cluster_69689485 {
    label="File: fetcher";
    name="fetcher";
    style="filled";
    graph[style=dotted];
    subgraph cluster_94faf234 {
        node_2c4fd31e;
        label="Class: Fetcher_Strategy";
        name="Fetcher_Strategy";
        style="filled";
        graph[style=dotted];
    };
};
subgraph cluster_c55b800a {
    node_b5774e1e node_1d84418f;
    label="File: main";
    name="main";
    style="filled";
    graph[style=dotted];
};
subgraph cluster_db8c7338 {
    label="File: parser";
    name="parser";
    style="filled";
    graph[style=dotted];
    subgraph cluster_ab1eb2ba {
        node_b99825b0 node_9fd4e13f node_d3cf4d29 node_1c203c02 node_14c890b2 node_5fc8b517 node_4a75031f node_3687a328 node_2fe5999a node_b060fe1b node_081bf222 node_f30dfb97;
        label="Class: QuestionParser_Template_Method";
        name="QuestionParser_Template_Method";
        style="filled";
        graph[style=dotted];
    };
};
subgraph cluster_259257c4 {
    label="File: scraper";
    name="scraper";
    style="filled";
    graph[style=dotted];
    subgraph cluster_f2f1b506 {
        node_eddec4f2;
        label="Class: StackOverflowScraper_Facade";
        name="StackOverflowScraper_Facade";
        style="filled";
        graph[style=dotted];
    };
};
subgraph cluster_57f781b0 {
    label="File: watcher";
    name="watcher";
    style="filled";
    graph[style=dotted];
    subgraph cluster_2d4240f7 {
        node_61366fcb node_d04e7c57 node_52b4935f node_a8b95a59 node_b8b69899 node_71423e58;
        label="Class: QuestionWatcher_Observer";
        name="QuestionWatcher_Observer";
        style="filled";
        graph[style=dotted];
    };
};
}
