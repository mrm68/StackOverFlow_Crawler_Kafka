digraph G {
concentrate=true;
splines="ortho";
rankdir="LR";
subgraph legend{
    rank = min;
    label = "legend";
    Legend [shape=none, margin=0, label = <
        <table cellspacing="0" cellpadding="0" border="1"><tr><td>Code2flow Legend</td></tr><tr><td>
        <table cellspacing="0">
        <tr><td>Regular function</td><td width="50px" bgcolor='#cccccc'></td></tr>
        <tr><td>Trunk function (nothing calls this)</td><td bgcolor='#966F33'></td></tr>
        <tr><td>Leaf function (this calls nothing else)</td><td bgcolor='#6db33f'></td></tr>
        <tr><td>Function call</td><td><font color='black'>&#8594;</font></td></tr>
        </table></td></tr></table>
        >];
}node_9fe8d2bd [label="8: __init__()" name="fetcher::Fetcher_Strategy.__init__" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_0ec34f3a [label="0: (global)()" name="main::(global)" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_ce4dfdb7 [label="10: main()" name="main::main" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_930f4386 [label="15: __init__()" name="notification_handler::Notifier.__init__" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_b0a0d86a [label="23: notify()" name="notification_handler::Notifier.notify" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_2d5271c2 [label="8: __init__()" name="parser::QuestionParser_Template_Method.__init__" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_baa171b1 [label="23: _parse_question()" name="parser::QuestionParser_Template_Method._parse_question" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_7ce7af24 [label="11: parse()" name="parser::QuestionParser_Template_Method.parse" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_62c43f10 [label="7: __init__()" name="scraper::StackOverflowScraper_Facade.__init__" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_18bf9da3 [label="17: __init__()" name="watcher::QuestionWatcher.__init__" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_d7b07f8e [label="28: _create_default_scraper()" name="watcher::QuestionWatcher._create_default_scraper" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_c39729ef [label="41: _load_last_seen_id()" name="watcher::QuestionWatcher._load_last_seen_id" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_e6ff9b7a [label="81: _save_last_seen_id()" name="watcher::QuestionWatcher._save_last_seen_id" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_6312d12c [label="62: check_new_questions()" name="watcher::QuestionWatcher.check_new_questions" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_c16f4287 [label="51: start_watching()" name="watcher::QuestionWatcher.start_watching" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_0ec34f3a -> node_ce4dfdb7 [color="#56B4E9" penwidth="2"];
node_ce4dfdb7 -> node_18bf9da3 [color="#CC79A7" penwidth="2"];
node_ce4dfdb7 -> node_c16f4287 [color="#CC79A7" penwidth="2"];
node_7ce7af24 -> node_baa171b1 [color="#F0E442" penwidth="2"];
node_18bf9da3 -> node_930f4386 [color="#009E73" penwidth="2"];
node_18bf9da3 -> node_d7b07f8e [color="#009E73" penwidth="2"];
node_18bf9da3 -> node_c39729ef [color="#009E73" penwidth="2"];
node_d7b07f8e -> node_9fe8d2bd [color="#D55E00" penwidth="2"];
node_d7b07f8e -> node_2d5271c2 [color="#D55E00" penwidth="2"];
node_d7b07f8e -> node_62c43f10 [color="#D55E00" penwidth="2"];
node_6312d12c -> node_b0a0d86a [color="#F0E442" penwidth="2"];
node_6312d12c -> node_b0a0d86a [color="#F0E442" penwidth="2"];
node_6312d12c -> node_e6ff9b7a [color="#F0E442" penwidth="2"];
node_c16f4287 -> node_b0a0d86a [color="#CC79A7" penwidth="2"];
node_c16f4287 -> node_b0a0d86a [color="#CC79A7" penwidth="2"];
node_c16f4287 -> node_6312d12c [color="#CC79A7" penwidth="2"];
subgraph cluster_a2e741fd {
    label="File: fetcher";
    name="fetcher";
    style="filled";
    graph[style=dotted];
    subgraph cluster_2f762bca {
        node_9fe8d2bd;
        label="Class: Fetcher_Strategy";
        name="Fetcher_Strategy";
        style="filled";
        graph[style=dotted];
    };
};
subgraph cluster_5b9522d8 {
    node_ce4dfdb7 node_0ec34f3a;
    label="File: main";
    name="main";
    style="filled";
    graph[style=dotted];
};
subgraph cluster_dada5b83 {
    label="File: notification_handler";
    name="notification_handler";
    style="filled";
    graph[style=dotted];
    subgraph cluster_7407c714 {
        node_930f4386 node_b0a0d86a;
        label="Class: Notifier";
        name="Notifier";
        style="filled";
        graph[style=dotted];
    };
};
subgraph cluster_418a2567 {
    label="File: parser";
    name="parser";
    style="filled";
    graph[style=dotted];
    subgraph cluster_e8fd4687 {
        node_2d5271c2 node_7ce7af24 node_baa171b1;
        label="Class: QuestionParser_Template_Method";
        name="QuestionParser_Template_Method";
        style="filled";
        graph[style=dotted];
    };
};
subgraph cluster_7daa667a {
    label="File: scraper";
    name="scraper";
    style="filled";
    graph[style=dotted];
    subgraph cluster_5341d67e {
        node_62c43f10;
        label="Class: StackOverflowScraper_Facade";
        name="StackOverflowScraper_Facade";
        style="filled";
        graph[style=dotted];
    };
};
subgraph cluster_494a46e0 {
    label="File: watcher";
    name="watcher";
    style="filled";
    graph[style=dotted];
    subgraph cluster_e68e2485 {
        node_18bf9da3 node_d7b07f8e node_c39729ef node_c16f4287 node_6312d12c node_e6ff9b7a;
        label="Class: QuestionWatcher";
        name="QuestionWatcher";
        style="filled";
        graph[style=dotted];
    };
};
}
